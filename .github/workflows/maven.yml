name: Build App with jpackage

on:
  workflow_dispatch:
 # push:
 #   branches: [ master ]

jobs:
  build:
    env:
      NAME: "TestApp"
      IDENTIFIER: "org.weasis.launcher"
      INPUT: "$GITHUB_WORKSPACE"
      OUTPUT: "dist"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
      #  - { os: ubuntu-latest, name: GNU, cc: gcc, cxx: g++, platform: x86, wsystem: linux, warc: x86, java: 16.0.0-ea.14 }
      #  - { os: ubuntu-latest, name: GNU, cc: gcc, cxx: g++, platform: x64, wsystem: linux, warc: x86-64, java: 16.0.0-ea.14 }
        - { os: macos-latest, name: Clang, cc: clang, cxx: clang++, platform: x64, wsystem: macosx, warc: x86-64, java: 17.0.0-ea.2 }
      #  - { os: windows-latest, name: VS2019, cc: cl, cxx: cl, platform: x86, wsystem: windows, warc: x86, java: 14.0.2 }
      #  - { os: windows-latest, name: VS2019, cc: cl, cxx: cl, platform: x64, wsystem: windows, warc: x86-64, java: 15.0.0-ea.36 }
      # - { os: windows-latest, name: VS2019, cc: cl, cxx: cl, platform: x64, wsystem: windows, warc: x86-64, java: 16.0.0-ea.24 }
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}
        architecture: ${{ matrix.platform }}

    - name: Build with Maven
      run: |
        mvn -B package --file pom.xml
        cp target/app.jar "${{ env.INPUT }}"

    - name: Import Developer Certificate
      uses: apple-actions/import-codesign-certs@v1
      id: cert
      with:
        p12-file-base64: ${{ secrets.MACOS_CERTIFICATE_DEVELOPMENT }}
        p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
        
    - name: Import Installer Certificate
      uses: apple-actions/import-codesign-certs@v1
      with:
        create-keychain: "false"
        keychain-password: ${{ steps.cert.outputs.keychain-password }}
        p12-file-base64: ${{ secrets.MACOS_CERTIFICATE_INSTALLER }}
        p12-password: ${{ secrets.MACOS_CERTIFICATE_PWD }}
              
    - name: Build app binary with jpackage
      shell: bash
      run: |
        machine=${{ matrix.wsystem }}
        if [ "$machine" = "macosx" ] ; then
          declare -a signArgs=("--mac-package-identifier" "${{ env.IDENTIFIER }}" "--mac-signing-keychain" "$HOME/Library/Keychains/signing_temp.keychain-db" "--mac-sign")
        else
          declare -a signArgs=("")
        fi
        echo "${signArgs[@]}"
        mkdir -p "${{ env.OUTPUT }}"
        jpackage --type app-image --input "files" --module-path "${{ env.INPUT }}" --module app/org.test.TestApp --dest "${{ env.OUTPUT }}" \
        --name "${{ env.NAME }}" --resource-dir "resources" --java-options "-splash:\$APPDIR\splash.jpg" --verbose "${signArgs[@]}"

    - name: Build package with jpackage
      shell: bash
      env:
        VENDOR: "Team"
        COPYRIGHT: "Â© 2020 Team"
        VERSION: "1.0"
      run: |
        mkdir -p final-dist
        machine=${{ matrix.wsystem }}
        ARC_NAME=${{ matrix.warc }}
        if [ "$machine" = "windows" ] ; then
          [ "$ARC_NAME" = "x86" ] && UPGRADE_UID="3aedc24e-48a8-4623-ab39-0c3c01c41673" || UPGRADE_UID="3aedc24e-48a8-4623-ab39-0c3c07c1231b"
          jpackage --type "msi" --app-image "${{ env.OUTPUT }}/${{ env.NAME }}" --dest "${{ env.OUTPUT }}" --name "${{ env.NAME }}" \
          --description "Test App" --win-upgrade-uuid "$UPGRADE_UID" --copyright "$COPYRIGHT" --vendor "$VENDOR" --verbose
          cp ${{ env.OUTPUT }}/*.msi final-dist/${NAME}-${{ env.VERSION }}-${ARC_NAME}.msi
        elif [ "$machine" = "linux" ] ; then
          declare -a installerTypes=("deb" "rpm")
          for installerType in ${installerTypes[@]}; do
            jpackage --type "$installerType" --app-image "${{ env.OUTPUT }}/${{ env.NAME }}" --dest "${{ env.OUTPUT }}" --name "${{ env.NAME }}" \
            --description "Test App" --copyright "$COPYRIGHT" --vendor "$VENDOR" \
            --linux-app-release "1" --linux-package-name "testapp" --linux-deb-maintainer "unknown" --linux-rpm-license-type "EPL-2.0" \
            --linux-menu-group "Viewer;Graphics;" --linux-app-category "science" --linux-shortcut --verbose
            cp ${{ env.OUTPUT }}/*.${installerType} final-dist
          done
        elif [ "$machine" = "macosx" ] ; then
          jpackage --type "pkg" --app-image "${{ env.OUTPUT }}/${{ env.NAME }}.app" --dest "${{ env.OUTPUT }}" --name "${{ env.NAME }}" \
          --resource-dir "resources" --copyright "$COPYRIGHT" --mac-package-identifier "${{ env.IDENTIFIER }}" \
          --mac-signing-keychain "$HOME/Library/Keychains/signing_temp.keychain-db" --mac-sign --verbose 
          cp ${{ env.OUTPUT }}/*.pkg final-dist
          echo "$(ls -la final-dist)"
          #codesign -dv --verbose=4 final-dist/${{ env.NAME }}-${{ env.VERSION }}.pkg
        fi
        echo "APP_ARTIFACT=testapp-${machine}-${ARC_NAME}-${{ env.VERSION }}" >> $GITHUB_ENV

    - name: Upload the final opencv binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.APP_ARTIFACT }}
        path: final-dist
