name: Build App with jpackage

on:
  workflow_dispatch:
 # push:
 #   branches: [ master ]

jobs:
  build:
    env:
      NAME: "TestApp"
      INPUT: "$GITHUB_WORKSPACE"
      OUTPUT: "$GITHUB_WORKSPACE/dist"
      OUTPUT_BIN: "$GITHUB_WORKSPACE/dist/apps"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
        - { os: ubuntu-latest, name: GNU, cc: gcc, cxx: g++, platform: x32, wsystem: linux, warc: x86, java: 16.0.0-ea.14 }
        - { os: ubuntu-latest, name: GNU, cc: gcc, cxx: g++, platform: x64, wsystem: linux, warc: x86-64, java: 16.0.0-ea.14 }
        - { os: macos-latest, name: Clang, cc: clang, cxx: clang++, platform: x64, wsystem: macosx, warc: x86-64, java: 16.0.0-ea.14 }
        - { os: windows-latest, name: VS2019, cc: cl, cxx: cl, platform: x32, wsystem: windows, warc: x86, java: 16.0.0-ea.14 }
      #  - { os: windows-latest, name: VS2019, cc: cl, cxx: cl, platform: x64, wsystem: windows, warc: x86-64, java: 15.0.0-ea.36 }
        - { os: windows-latest, name: VS2019, cc: cl, cxx: cl, platform: x64, wsystem: windows, warc: x86-64, java: 16.0.0-ea.14 }
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java }}

    - name: Build with Maven
      run: |
        mvn -B package --file pom.xml
        cp target/app.jar "${{ env.INPUT }}"
        
    - name: Build app binary with jpackage
      shell: bash
      run: |
        mkdir -p "${{ env.OUTPUT_BIN }}"
        jpackage --type app-image -p "${{ env.INPUT }}" -m app/org.test.TestApp --dest "${{ env.OUTPUT_BIN }}" --name "$NAME" --verbose
        echo "$(ls -la ${{ env.OUTPUT_BIN }})"

    - name: Build package with jpackage
      shell: bash
      env:
        VENDOR: "Team"
        COPYRIGHT: "Â© 2020 Team"
      run: |
        machine=${{ matrix.wsystem }}
        ARC_NAME=${{ matrix.warc }}
        if [ "$machine" = "windows" ] ; then
          [ "$ARC_NAME" = "x86" ] && UPGRADE_UID="3aedc24e-48a8-4623-ab39-0c3c01c45673" || UPGRADE_UID="3aedc24e-48a8-4623-ab39-0c3c01c1231b"
          jpackage --type "msi" --app-image "${{ env.OUTPUT_BIN }}" --dest "${{ env.OUTPUT }}" --name "$NAME" \
         --description "Test App" --win-upgrade-uuid "$UPGRADE_UID" --copyright "$COPYRIGHT" --vendor "$VENDOR" --verbose
        elif [ "$machine" = "linux" ] ; then
          declare -a installerTypes=("deb" "rpm")
          for installerType in ${installerTypes[@]}; do
            jpackage --type "$installerType" --app-image "${{ env.OUTPUT_BIN }}" --dest "${{ env.OUTPUT }}" --name "$NAME" \
            --description "Test App" --copyright "$COPYRIGHT" --vendor "$VENDOR" \
            --linux-app-release "1" --linux-package-name "app" --linux-deb-maintainer "unknown" --linux-rpm-license-type "EPL-2.0" \
            --linux-menu-group "Viewer;Graphics;" --linux-app-category "science" --linux-shortcut --verbose
          done
        elif [ "$machine" = "macosx" ] ; then
          jpackage --type "pkg" --app-image "${{ env.OUTPUT_BIN }}" --dest "${{ env.OUTPUT }}" --name "$NAME" \
          --copyright "$COPYRIGHT" --mac-package-identifier "org.test" --verbose
        fi
